# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import threading
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import paho.mqtt.client as mqtt
import json


class Ui_MainWindow(object):
    updateParkingSignal = QtCore.pyqtSignal(list)
    updateTemperatureSignal  = QtCore.pyqtSignal(float)
    broker = 'broker.hivemq.com'
    client = mqtt.Client("gui_ruiz")
    spots = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(962, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Parking spots visualization frame and layout
        self.parkingFrame = QtWidgets.QFrame(self.centralwidget)
        self.parkingFrame.setGeometry(QtCore.QRect(20, 20, 920, 100))  # Adjust size and position as needed
        self.parkingFrame.setStyleSheet("border: 1px solid black;")
        self.parkingFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.parkingFrame.setObjectName("parkingFrame")
        self.parkingLayout = QtWidgets.QHBoxLayout(self.parkingFrame)
        # Initialize parking spot labels with numbers
        for i in range(1, 6):
            parkingSpot = QtWidgets.QLabel(self.parkingFrame)
            parkingSpot.setStyleSheet("background-color: red; border: 1px solid black;")
            parkingSpot.setAlignment(QtCore.Qt.AlignCenter)
            parkingSpot.setObjectName(f"parking{i}")
            parkingSpot.setText(str(i))  # Set text to show numbers
            self.parkingLayout.addWidget(parkingSpot)
            setattr(self, f'parking{i}', parkingSpot)

        self.spots.extend([self.parking1, self.parking2, self.parking3, self.parking4, self.parking5])
        print(len(self.spots))

        # Temperature and Emergency Controls layout
        self.controlsLayout = QtWidgets.QHBoxLayout()

        # Temperature frame and layout
        self.tempFrame = QtWidgets.QFrame(self.centralwidget)
        self.tempFrame.setStyleSheet("border: 1px solid black;")
        self.tempFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tempLayout = QtWidgets.QVBoxLayout(self.tempFrame)
        self.tempSensorLabel = QtWidgets.QLabel("Temperature Sensor", self.tempFrame)
        self.tempSensorLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.tempLayout.addWidget(self.tempSensorLabel)
        self.tempSensorValueLabel = QtWidgets.QLabel("Placeholder", self.tempFrame)
        self.tempSensorValueLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.tempLayout.addWidget(self.tempSensorValueLabel)
        self.controlsLayout.addWidget(self.tempFrame)

        # Emergency frame and layout
        self.emergencyFrame = QtWidgets.QFrame(self.centralwidget)
        self.emergencyFrame.setStyleSheet("border: 1px solid black;")
        self.emergencyFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.emergencyLayout = QtWidgets.QVBoxLayout(self.emergencyFrame)
        # Assuming this label is used for visual indication
        self.emergencyLabel = QtWidgets.QLabel(self.emergencyFrame)
        self.emergencyLabel.setObjectName("emergencyLabel")
        self.emergencyLabel.setStyleSheet("""
            QLabel {
                background-color: gray;
                border: 2px solid black;
                border-radius: 25px;  /* Adjust this value to half of your QLabel's width and height to make it circular */
            }
        """)
        self.emergencyLabel.setMinimumSize(50, 50)  # Ensures the label is large enough to appear circular
        self.emergencyLabel.setMaximumSize(50, 50)  # Keeps the label's size fixed
        self.emergencyLabel.setAlignment(QtCore.Qt.AlignCenter)  # Center the text (if any)
        self.emergencyLayout.addWidget(self.emergencyLabel)
        self.controlsLayout.addWidget(self.emergencyFrame)
        self.emergencyOffButton = QtWidgets.QPushButton("Emergency Off", self.emergencyFrame)
        self.emergencyLayout.addWidget(self.emergencyOffButton)
        self.emergencyOnButton = QtWidgets.QPushButton("Emergency On", self.emergencyFrame)
        self.emergencyLayout.addWidget(self.emergencyOnButton)
        spacerLeft = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        spacerRight = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.emergencyLayout.addSpacerItem(spacerLeft)  # Add spacer before the label
        self.emergencyLayout.addWidget(self.emergencyLabel, 0, QtCore.Qt.AlignCenter)  # Add the label centered
        self.emergencyLayout.addSpacerItem(spacerRight)  # Add spacer after the label

        # Message board frame and layout
        self.messageBoardFrame = QtWidgets.QFrame(self.centralwidget)
        self.messageBoardFrame.setGeometry(QtCore.QRect(20, 240, 920, 150))  # Adjust as needed
        self.messageBoardFrame.setStyleSheet("border: 1px solid black;")
        self.messageBoardFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.messageBoardLayout = QtWidgets.QVBoxLayout(self.messageBoardFrame)
        self.messageboardLabel = QtWidgets.QLabel("Display message to display board", self.messageBoardFrame)
        self.messageboardLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.messageBoardLayout.addWidget(self.messageboardLabel)
        self.messageBoardInput = QtWidgets.QTextEdit(self.messageBoardFrame)
        self.messageBoardLayout.addWidget(self.messageBoardInput)
        self.messageBoardSend = QtWidgets.QPushButton("Display", self.messageBoardFrame)
        self.messageBoardSend.clicked.connect(self.sendBoardMessage)
        self.messageBoardLayout.addWidget(self.messageBoardSend)

        # Central widget layout
        self.centralLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.centralLayout.addWidget(self.parkingFrame)
        self.centralLayout.addLayout(self.controlsLayout)
        self.centralLayout.addWidget(self.messageBoardFrame)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.updateParkingSignal.connect(self.updateParking)
        self.updateTemperatureSignal.connect(self.updateTemperature)
        self.client.connect(self.broker)
        self.client.loop_start()
        self.client.subscribe("parking_ruiz")
        self.client.on_message = self.on_message

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.messageboardLabel.setText(_translate("MainWindow", "Send message to display board"))
        self.messageBoardInput.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.messageBoardInput.setPlaceholderText(_translate("MainWindow", "Type message here"))
        self.messageBoardSend.setText(_translate("MainWindow", "Display"))
        self.parking1.setText(_translate("MainWindow", "1"))
        self.parking2.setText(_translate("MainWindow", "2"))
        self.parking3.setText(_translate("MainWindow", "3"))
        self.parking4.setText(_translate("MainWindow", "4"))
        self.parking5.setText(_translate("MainWindow", "5"))
        self.tempSensorLabel.setText(_translate("MainWindow", "Temperature Sensor"))
        self.tempSensorValueLabel.setText(_translate("MainWindow", "Placeholder"))
        self.emergencyOffButton.setText(_translate("MainWindow", "Turn Emergency Light Off"))
        self.emergencyOnButton.setText(_translate("MainWindow", "Turn Emergency Light On"))

    def sendBoardMessage(self):
        try:
            self.client.connect(self.broker)
            raw = {
                "type":"msg_board",
                "data":self.messageBoardInput.toPlainText()
			}
            payload = json.dumps(raw)
            self.client.publish("MSG_BOARD", payload)
            print("[MSG BOARD] Just published %s to topic \"MSG_BOARD\"" % payload)
        except Exception as e:
             print(f'[MSG BOARD] {e}') 

    def updateParking(self, parking):
        for i in range(0, len(parking)):
            if parking[i]:
                self.spots[i].setStyleSheet("background-color: green; border: 1px solid black;")
            else:
                self.spots[i].setStyleSheet("background-color: red; border: 1px solid black;")

                
    def updateTemperature(self, temp):
        self.tempSensorValueLabel.setText(str(temp))
                
    def on_message(self, client, userdata, message):
        try: 
            payload = json.loads(message.payload)
            type = payload["type"]
            data = payload["data"]
            print(f"[{type}] Received message: {str(data)}")
            if type == "parking":
                self.updateParkingSignal.emit(data)
            if type == "temperature":
                self.updateTemperatureSignal.emit(data)
        except Exception as e:
            print(f"Error processing message: {e}")



class emergencyLightGraphic(QtWidgets.QWidget):
    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.setBrush(QtGui.QBrush(QtCore.Qt.red))
        painter.drawEllipse(160,0,50, 50)



class MyApplication(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = MyApplication()
    mainWindow.show()
    sys.exit(app.exec_())